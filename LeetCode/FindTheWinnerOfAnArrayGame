PROBLEM:-
Given an integer array arr of distinct integers and an integer k.

A game will be played between the first two elements of the array (i.e. arr[0] and arr[1]). In each round of the game, we compare arr[0] with arr[1], the larger integer wins and remains at position 0, and the smaller integer moves to the end of the array. The game ends when an integer wins k consecutive rounds.

Return the integer which will win the game.

It is guaranteed that there will be a winner of the game.

Example 1:

Input: arr = [2,1,3,5,4,6,7], k = 2
Output: 5
Explanation: Let's see the rounds of the game:
Round |       arr       | winner | win_count
  1   | [2,1,3,5,4,6,7] | 2      | 1
  2   | [2,3,5,4,6,7,1] | 3      | 1
  3   | [3,5,4,6,7,1,2] | 5      | 1
  4   | [5,4,6,7,1,2,3] | 5      | 2
So we can see that 4 rounds will be played and 5 is the winner because it wins 2 consecutive games.
Example 2:

Input: arr = [3,2,1], k = 10
Output: 3
Explanation: 3 will win the first 10 rounds consecutively.

SOLUTION:-
class Solution {
    public int getWinner(int[] arr, int k) {
        int current = arr[0];
        int consecutiveWins = 0;
        
        for (int i = 1; i < arr.length; i++) {
            if (arr[i] > current) {
                current = arr[i];
                consecutiveWins = 1;
            } else {
                consecutiveWins++;
            }
            
            if (consecutiveWins == k) {
                return current;
            }
        }
        
        return current;
    }
    
    public static void main(String[] args) {
        Solution solution = new Solution();
        
        int[] arr1 = {2, 1, 3, 5, 4, 6, 7};
        int k1 = 2;
        System.out.println("Example 1: " + solution.getWinner(arr1, k1)); // Output: 5
        
        int[] arr2 = {3, 2, 1};
        int k2 = 10;
        System.out.println("Example 2: " + solution.getWinner(arr2, k2)); // Output: 3
    }
}
