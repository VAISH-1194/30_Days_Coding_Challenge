Language:-
Python

Problem:-
Given a string s, return the longest 
palindromic
 
substring
 in s.
Example 1:

Input: s = "babad"
Output: "bab"
Explanation: "aba" is also a valid answer.
Example 2:

Input: s = "cbbd"
Output: "bb"

Solution:-
class Solution(object):
    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: str
        """
        n = len(s)
        if n < 2:
            return s

        start = 0
        max_len = 1
        dp = [[False] * n for _ in range(n)]

        
        for i in range(n):
            dp[i][i] = True

      
        for i in range(n - 1):
            if s[i] == s[i + 1]:
                dp[i][i + 1] = True
                start = i
                max_len = 2

       
        for length in range(3, n + 1):
            for i in range(n - length + 1):
                j = i + length - 1

                if s[i] == s[j] and dp[i + 1][j - 1]:
                    dp[i][j] = True

                    if length > max_len:
                        start = i
                        max_len = length

        return s[start:start + max_len]
