Problem:-
Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.

Assume the environment does not allow you to store 64-bit integers (signed or unsigned).

 

Example 1:

Input: x = 123
Output: 321
Example 2:

Input: x = -123
Output: -321
Example 3:

Input: x = 120
Output: 21

Solution:-
class Solution(object):
    def reverse(self, x):
        """
        :type x: int
        :rtype: int
        """
        INT_MAX = 2**31 - 1
        INT_MIN = -2**31
        reversed_x = 0
        sign = 1 if x > 0 else -1
        x = abs(x)
        
        while x != 0:
            pop = x % 10
            x = x // 10
            
            if reversed_x > INT_MAX // 10 or (reversed_x == INT_MAX // 10 and pop > 7):
                return 0
            if reversed_x < INT_MIN // 10 or (reversed_x == INT_MIN // 10 and pop < -8):
                return 0
            
            reversed_x = reversed_x * 10 + pop
        
        return reversed_x * sign
